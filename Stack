Reverse a string using stack:

def reverse_string(string):
   return string[::-1]
   
Valid parentheses:
   
  class Solution:
    def isValid(self, s: str) -> bool:
        
            stack = []
            mapping = {')': '(', '}': '{', ']': '['}
            for char in s:
                if char in mapping:
                    if not stack or stack.pop() != mapping[char]:
                        return False
                else:
                    stack.append(char)
            return not stack
            
Next greater element:

def nextLargerElement(self,arr,n):
        stack = []
        result = []
        
        for i in range(n-1,-1,-1):
            while (stack and arr[i] >= stack[-1]): stack.pop()
            result.append(stack[-1] if stack else -1)
            stack.append(arr[i])
            
        return result[::-1]
        
   Remove duplicates in letters:
   
    def removeDuplicateLetters(self, s):
        last_occ = {c: i for i, c in enumerate(s)}
        stack = ["!"]
        Visited = set()
        
        for i, symbol in enumerate(s):
            if symbol in Visited: continue
            
            while (symbol < stack[-1] and last_occ[stack[-1]] > i):
                Visited.remove(stack.pop())
           
            stack.append(symbol)
            Visited.add(symbol)        
        return "".join(stack)[1:]
  
